@import "../scss/colors.scss";
@import "../scss/mixin.scss";
@import "../scss/dimensions.scss";

#sidebar {
  @include color-scroll($layout-secondary-background-color);
  min-width: $sidebar-width;
  max-width: $sidebar-width;
  height: 100%;
  position: fixed;
  z-index: 3;
  display: flex;
  flex-direction: column;
  background-color: $sidebar-background-color;
}

#sidebar-header{
  padding: $sidebar-content-padding;
  margin-bottom: 20px;
  border-bottom: 1px solid $layout-secondary-background-color;
  height: $navbar-height;
  min-height: $navbar-height;
  @include align-vertical;
  #sidebar-header-text{
    @include text-truncated;
    color: $sidebar-link-color;
    font-weight: bold;
  }
}

/*
Note:

The layout of the sidebar is:
  1. Non scrollable container with some links.
  2. Scrollable container with links inside.
  3. Non scrollable container again at the bottom, before the footer.

Checklist to test when resizing vertically:
  1. The line at the top is always aligned with the navbar.
  2. Footer is always visible.
  3. Footer size doesn't change.
  4. The lower non-scrollable container is pushed by the footer upwards,
     it also pushes upwards the scrollable container. It only starts to
     hide links when the window height is not enough to show everything.
  5. Only the scrollable container becomes smaller. Since there's a scroll,
     it won't matter.
*/

#sidebar-scrollable-container{
  overflow-y: auto;
  padding: 0 $sidebar-content-padding;
  max-height: $sidebar-scrollable-widget-max-height;
  /*
  The problem of setting a min-height here,
  is that the scrollable container could be empty, and in that
  case it would show an empty space.
  Revisit and decide what to do when it's decided what will
  be in the scrollable container.
  */
}

.sidebar-non-scrollable-container{
  padding: 0 $sidebar-content-padding;
}

#sidebar-lower-non-scrollable-container{
  /*
  This margin bottom is necessary only for when the
  window height is too small.
  Since the footer has absolute position, this container will start to
  move only when it touches not the footer but the actual bottom edge of the
  screen. So this margin makes it a bit bigger so that it looks as if it's being
  pushed upwards by the footer.
  */
  margin-bottom: $sidebar-footer-widget-height;
}

.sidebar-link-item{
  a{
    color: $sidebar-link-color;
    display: block;
    padding: 2px 10px;
    margin: 0 0 5px 0;
    border-radius: $default-border-radius-sm;
    transition: 0.1s;
    &:hover{
      color: $sidebar-link-color-hover;
      text-decoration: none;
      background-color: $sidebar-background-highlight-color;
    }
  }
}

#sidebar-footer-container{
  @include align-vertical;
  position: absolute;
  bottom: 0;
  background-color: $layout-secondary-background-color;
  max-height: $sidebar-footer-widget-height;
  min-height: $sidebar-footer-widget-height;
  width: 100%;
  padding: $sidebar-content-padding;

  #sidebar-footer-user-icon{
    img{
      margin-right: 10px;
      width: 40px;
      height: 40px;
      border-radius: 20px;
    }
  }

  #sidebar-footer-user-name{
    flex: 1;
    color: $layout-secondary-background-link-color;
  }

  #sidebar-footer-config-button{
    button{
      transition: 0.3s;
      color: $layout-secondary-background-link-color;
      border: 0;
      outline: none;
      background-color: transparent;
      &:hover{
        color: $layout-secondary-background-link-color-hover;
        transform: rotateZ(90deg);
      }
    }
  }
}
